//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ToolsManager.DataServices.Client.FileServiceProxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileServiceProxy.IFileUploadService")]
    public interface IFileUploadService {
        
        // CODEGEN: Generating message contract since the wrapper name (UploadRequest) of message UploadRequest does not match the default value (UploadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploadService/UploadFile", ReplyAction="http://tempuri.org/IFileUploadService/UploadFileResponse")]
        ToolsManager.DataServices.Client.FileServiceProxy.UploadResponse UploadFile(ToolsManager.DataServices.Client.FileServiceProxy.UploadRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (DownloadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploadService/DownloadFile", ReplyAction="http://tempuri.org/IFileUploadService/DownloadFileResponse")]
        ToolsManager.DataServices.Client.FileServiceProxy.DownloadResponse DownloadFile(ToolsManager.DataServices.Client.FileServiceProxy.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploadService/DeleteFile", ReplyAction="http://tempuri.org/IFileUploadService/DeleteFileResponse")]
        void DeleteFile(string FileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploadService/FileExists", ReplyAction="http://tempuri.org/IFileUploadService/FileExistsResponse")]
        bool FileExists(string FileName);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileData;
        
        public UploadRequest() {
        }
        
        public UploadRequest(string FileName, System.IO.Stream FileData) {
            this.FileName = FileName;
            this.FileData = FileData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool Succeeded;
        
        public UploadResponse() {
        }
        
        public UploadResponse(bool Succeeded) {
            this.Succeeded = Succeeded;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(string FileName) {
            this.FileName = FileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileData;
        
        public DownloadResponse() {
        }
        
        public DownloadResponse(System.IO.Stream FileData) {
            this.FileData = FileData;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileUploadServiceChannel : ToolsManager.DataServices.Client.FileServiceProxy.IFileUploadService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileUploadServiceClient : System.ServiceModel.ClientBase<ToolsManager.DataServices.Client.FileServiceProxy.IFileUploadService>, ToolsManager.DataServices.Client.FileServiceProxy.IFileUploadService {
        
        public FileUploadServiceClient() {
        }
        
        public FileUploadServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileUploadServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileUploadServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileUploadServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ToolsManager.DataServices.Client.FileServiceProxy.UploadResponse ToolsManager.DataServices.Client.FileServiceProxy.IFileUploadService.UploadFile(ToolsManager.DataServices.Client.FileServiceProxy.UploadRequest request) {
            return base.Channel.UploadFile(request);
        }
        
        public bool UploadFile(string FileName, System.IO.Stream FileData) {
            ToolsManager.DataServices.Client.FileServiceProxy.UploadRequest inValue = new ToolsManager.DataServices.Client.FileServiceProxy.UploadRequest();
            inValue.FileName = FileName;
            inValue.FileData = FileData;
            ToolsManager.DataServices.Client.FileServiceProxy.UploadResponse retVal = ((ToolsManager.DataServices.Client.FileServiceProxy.IFileUploadService)(this)).UploadFile(inValue);
            return retVal.Succeeded;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ToolsManager.DataServices.Client.FileServiceProxy.DownloadResponse ToolsManager.DataServices.Client.FileServiceProxy.IFileUploadService.DownloadFile(ToolsManager.DataServices.Client.FileServiceProxy.DownloadRequest request) {
            return base.Channel.DownloadFile(request);
        }
        
        public System.IO.Stream DownloadFile(string FileName) {
            ToolsManager.DataServices.Client.FileServiceProxy.DownloadRequest inValue = new ToolsManager.DataServices.Client.FileServiceProxy.DownloadRequest();
            inValue.FileName = FileName;
            ToolsManager.DataServices.Client.FileServiceProxy.DownloadResponse retVal = ((ToolsManager.DataServices.Client.FileServiceProxy.IFileUploadService)(this)).DownloadFile(inValue);
            return retVal.FileData;
        }
        
        public void DeleteFile(string FileName) {
            base.Channel.DeleteFile(FileName);
        }
        
        public bool FileExists(string FileName) {
            return base.Channel.FileExists(FileName);
        }
    }
}
